"use strict";(self.webpackChunkFranzininho=self.webpackChunkFranzininho||[]).push([[1576],{59724:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>t,contentTitle:()=>r,default:()=>m,frontMatter:()=>n,metadata:()=>d,toc:()=>l});var i=o(17624),a=o(4552);const n={id:"saida-digital",title:"Sa\xedda Digital",slug:"/franzininho-diy/exemplos-avr-libc/saida-digital",description:"Vamos entender como trabalhar com as sa\xeddas Digitais",authors:"F\xe1bio Souza",date:"24/04/2021",some_url:"https://github.com/FBSeletronica"},r=void 0,d={id:"FranzininhoDIY/exemplos-avr-libc/saida-digital",title:"Sa\xedda Digital",description:"Vamos entender como trabalhar com as sa\xeddas Digitais",source:"@site/docs/FranzininhoDIY/exemplos-avr-libc/saida-digital.md",sourceDirName:"FranzininhoDIY/exemplos-avr-libc",slug:"/franzininho-diy/exemplos-avr-libc/saida-digital",permalink:"/docs/franzininho-diy/exemplos-avr-libc/saida-digital",draft:!1,unlisted:!1,editUrl:"https://github.com/Franzininho/docs-franzininho-site/edit/main/docs/FranzininhoDIY/exemplos-avr-libc/saida-digital.md",tags:[],version:"current",frontMatter:{id:"saida-digital",title:"Sa\xedda Digital",slug:"/franzininho-diy/exemplos-avr-libc/saida-digital",description:"Vamos entender como trabalhar com as sa\xeddas Digitais",authors:"F\xe1bio Souza",date:"24/04/2021",some_url:"https://github.com/FBSeletronica"},sidebar:"docs",previous:{title:"Hello, World!",permalink:"/docs/franzininho-diy/exemplos-avr-libc/hello-world"},next:{title:"Entrada Digital",permalink:"/docs/franzininho-diy/exemplos-avr-libc/entrada-digital"}},t={},l=[{value:"Recursos Necess\xe1rios",id:"recursos-necess\xe1rios",level:2},{value:"Pinos do ATtiny85",id:"pinos-do-attiny85",level:2},{value:"Algumas Particularidades do circuito da Franzininho DIY",id:"algumas-particularidades-do-circuito-da-franzininho-diy",level:3},{value:"Registradores respons\xe1veis pelos pinos de I/O",id:"registradores-respons\xe1veis-pelos-pinos-de-io",level:2},{value:"C\xf3digos",id:"c\xf3digos",level:2},{value:"Desafio",id:"desafio",level:2}];function c(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"Agora que j\xe1 estamos com as ferramentas instaladas e a placa Franzininho DIY em m\xe3os, vamos dar in\xedcio aos estudos dos perif\xe9ricos internos do ATtiny85."}),"\n",(0,i.jsx)(s.p,{children:"Nesse artigo vamos explorar os pinos de I/O como sa\xedda digital. Ao final, voc\xea saber\xe1 como acionar dispositivos externos a Franzininho DIY."}),"\n",(0,i.jsx)(s.h2,{id:"recursos-necess\xe1rios",children:"Recursos Necess\xe1rios"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Placa Franzininho DIY(com Micronucleus)"}),"\n",(0,i.jsx)(s.li,{children:"Computador com as ferramentas de software instaladas"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"pinos-do-attiny85",children:"Pinos do ATtiny85"}),"\n",(0,i.jsx)(s.p,{children:"O ATtiny85 possui 8 pinos, sendo que 6 deles podemos usar como I/O (entradas ou sa\xeddas) digitais. Os pinos de I/O s\xe3o nomeados conforme a porta que eles pertencem. Na figura a seguir vemos que os pinos do ATtiny85 s\xe3o nomeados de PBx, onde x \xe9 o n\xfamero correspondente ao pino no registrador (n\xe3o se preocupe, vamos ver mais detalhes a seguir):"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Pinagem do ATtiny85",src:o(89583).c+"",width:"2094",height:"498"})}),"\n",(0,i.jsx)(s.p,{children:"Cada pino de I/O pode ser usado como entrada ou sa\xedda e tamb\xe9m como outras fun\xe7\xf5es nesse momento s\xf3 vamos trabalhar com os pinos funcionando como GPIO (General Porpouse Input/Output)."}),"\n",(0,i.jsx)(s.p,{children:"Conforme exibido na imagem acima, temos os seguintes pinos dispon\xedveis no ATtiny85:"}),"\n",(0,i.jsx)(s.p,{children:"PB0, PB1, PB2, PB3, PB4, PB5."}),"\n",(0,i.jsx)(s.h3,{id:"algumas-particularidades-do-circuito-da-franzininho-diy",children:"Algumas Particularidades do circuito da Franzininho DIY"}),"\n",(0,i.jsx)(s.p,{children:"Os pinos de I/O s\xe3o marcados em Amarelo no Pinout da Franzininho DIY"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"pinout Franzininho DIY",src:o(53540).c+"",width:"1630",height:"1122"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"O pino PB5 \xe9 configurado como RESET na Franzininho DIY, sendo assim n\xe3o poderemos us\xe1-lo como I/O."}),"\n",(0,i.jsx)(s.li,{children:"Os pinos PB3 e PB4 s\xe3o usados para o circuito da USB, sendo assim temos que us\xe1-los com cautela. Geralmente esses pinos s\xe3o usados apenas como sa\xeddas digitais."}),"\n",(0,i.jsx)(s.li,{children:"O LED amarelo da placa est\xe1 ligado ao pino PB1."}),"\n",(0,i.jsx)(s.li,{children:"Os pinos PB0 E PB2 n\xe3o possuem circuito ligados a eles."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"registradores-respons\xe1veis-pelos-pinos-de-io",children:"Registradores respons\xe1veis pelos pinos de I/O"}),"\n",(0,i.jsx)(s.p,{children:"Para trabalhar com os pinos de I/O no ATtiny85 temos 3 registradores:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"PORTB: Registrador de dados. Respons\xe1vel pela escrita nos pinos;"}),"\n",(0,i.jsx)(s.li,{children:"DDRB: Registrador de dire\xe7\xe3o do pino. Respons\xe1vel pela configura\xe7\xe3o dos pinos para definir se ser\xe1 entrada ou sa\xedda;"}),"\n",(0,i.jsx)(s.li,{children:"PINB: Registrador de entrada da porta. Respons\xe1vel pela leitura do estado do pino."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Note que todos os registradores terminam com B no final. Isso significa que estamos trabalhando com o PORTB. Caso fosse um microcontrolador com maior quantidade de pinos ter\xedamos os finais A, B,C, etc. Cada porta s\xf3 possui no m\xe1ximo 8 pinos."}),"\n",(0,i.jsx)(s.p,{children:"Na se\xe7\xe3o 10 do datasheet do ATtiny85 temos todos os detalhes para se trabalhar com os I/O. A tabela a seguir, retirada do datasheet, exibe as configura\xe7\xf5es poss\xedveis para os pinos:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"configura\xe7\xe3o GPIO",src:o(62896).c+"",width:"1194",height:"339"})}),"\n",(0,i.jsx)(s.p,{children:"A figura abaixo exibe os registradores respons\xe1veis pelos pino de I/O do PORTB:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"configura\xe7\xe3o GPIO",src:o(93372).c+"",width:"1448",height:"696"})}),"\n",(0,i.jsx)(s.p,{children:"Note que cada bit dos registradores \xe9 respons\xe1vel por pino sendo indexado pelo n\xfamero correspondente ao bit. Dessa forma, se quisermos usar o pino PB1 para acionar o LED, devemos configurar o registrador DDRB da seguinte forma:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"7"}),(0,i.jsx)(s.th,{children:"6"}),(0,i.jsx)(s.th,{children:"5"}),(0,i.jsx)(s.th,{children:"4"}),(0,i.jsx)(s.th,{children:"3"}),(0,i.jsx)(s.th,{children:"2"}),(0,i.jsx)(s.th,{children:"1"}),(0,i.jsx)(s.th,{children:"0"})]})}),(0,i.jsx)(s.tbody,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"-"}),(0,i.jsx)(s.td,{children:"-"}),(0,i.jsx)(s.td,{children:"0"}),(0,i.jsx)(s.td,{children:"0"}),(0,i.jsx)(s.td,{children:"0"}),(0,i.jsx)(s.td,{children:"0"}),(0,i.jsx)(s.td,{children:"1"}),(0,i.jsx)(s.td,{children:"0"})]})})]}),"\n",(0,i.jsx)(s.p,{children:"E para acionar ligar/deligar o LED devemos colocar 1 ou no bit correspondente no PORTB."}),"\n",(0,i.jsx)(s.p,{children:"Vamos a um exemplo para ficar mais claro."}),"\n",(0,i.jsx)(s.h2,{id:"c\xf3digos",children:"C\xf3digos"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-c",children:"#include <avr/io.h>\n#include <util/delay.h>\n\n#define F_CPU 16500000L        // Frequ\xeancia do oscilador. usado para a fun\xe7\xe3o de delay\n\nint main(void)\n{\n  DDRB = 0b00000010;           // Configura Pino PB1 como sa\xedda (Pino do LED)\n\n  while (1)\n  {\n      PORTB = 0b00000010;      // Liga o LED 1\n      _delay_ms(250);          // Aguarda 250 ms\n      PORTB = 0b00000000;      // Desliga o LED 1\n      _delay_ms(250);          // Aguarda 250 ms\n  }\n\n  return (0);\n}\n"})}),"\n",(0,i.jsx)(s.p,{children:"O exemplo acima pisca o LED em intervalos de 250 ms. A configura\xe7\xe3o do pino PB1 como sa\xedda foi feito colocando o bit1 de DDRB em 1. J\xe1 para ligar e desligar o LED foi manipulado o bit 1 de PORTB, hora em 1 hora em 0."}),"\n",(0,i.jsx)(s.p,{children:"Bacana, n\xe3o?"}),"\n",(0,i.jsxs)(s.p,{children:["podemos melhorar a manipula\xe7\xe3o dos bits dos registradores usando macros. As macros s\xe3o rotinas que facilitam nossas vidas. Recomendo que se voc\xea leia esse artigo para entender sobre as macros e as opera\xe7\xf5es efetuadas: ",(0,i.jsx)(s.a,{href:"https://www.embarcados.com.br/bits-em-linguagem-c/",children:"https://www.embarcados.com.br/bits-em-linguagem-c/"})]}),"\n",(0,i.jsx)(s.p,{children:"Vamos usar as seguintes macros:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"#define setBit(valor,bit) (valor |= (1<<bit))\n#define toogleBit(valor,bit) (valor ^= (1<<bit))\n"})}),"\n",(0,i.jsx)(s.p,{children:"Os nomes j\xe1 s\xe3o auto-explicativos mas vamos verificar como us\xe1-las no programa em C:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-c",children:"#include <avr/io.h>\n#include <util/delay.h>\n\n#define F_CPU 16500000L\n\n// Macros\n#define setBit(valor,bit) (valor |= (1 << bit))\n#define toogleBit(valor,bit) (valor ^= (1 << bit))\n\nint main(void)\n{\n    setBit(DDRB,PB1);          // Configura Pino PB1 como sa\xedda (Pino do LED)\n\n    while (1)\n    {\n        toogleBit(PORTB, PB1); // Inverte o estado do pino\n        _delay_ms(250);        // Aguarda 250 ms\n    }\n\n    return (0);\n}\n"})}),"\n",(0,i.jsx)(s.p,{children:"Dessa forma manipulamos somente os bits desejados, n\xe3o alterando os valores dos outros que poder\xe3o ser usados para outras aplica\xe7\xf5es."}),"\n",(0,i.jsx)(s.h2,{id:"desafio",children:"Desafio"}),"\n",(0,i.jsx)(s.p,{children:"Coloque outro LED no pino PB0 e o acione alternadamente ao pino PB1, ou seja, quando LED no PB0 estiver ligado o LED em PB1 deve apagar e vice-versa."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Autor"}),(0,i.jsx)(s.th,{children:(0,i.jsx)(s.a,{href:"https://github.com/FBSeletronica",children:"F\xe1bio Souza"})})]})}),(0,i.jsx)(s.tbody,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Data:"}),(0,i.jsx)(s.td,{children:"24/04/2021"})]})})]})]})}function m(e={}){const{wrapper:s}={...(0,a.M)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},53540:(e,s,o)=>{o.d(s,{c:()=>i});const i=o.p+"assets/images/Pinagem-Franzininho-DIY-V2RV2-42a18903012c4dc223f9d4c774730625.png"},62896:(e,s,o)=>{o.d(s,{c:()=>i});const i=o.p+"assets/images/config-gpio-5448c58ddfc3c042b28c64b3cedb300e.png"},89583:(e,s,o)=>{o.d(s,{c:()=>i});const i=o.p+"assets/images/pinagem-attiny85-8fa815c3f3e21f9c3b699b09c9a7f6f1.png"},93372:(e,s,o)=>{o.d(s,{c:()=>i});const i=o.p+"assets/images/registradores-port-B-f8a36498e9dd1043ec81211a0fb7103c.png"},4552:(e,s,o)=>{o.d(s,{I:()=>d,M:()=>r});var i=o(11504);const a={},n=i.createContext(a);function r(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);